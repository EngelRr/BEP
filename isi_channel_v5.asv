clear
close all
clc

profile on

%% Parameters
sequenceLength = 1e3;    % Sequence length per iteration 
symbols = [-1 1];
M = length(symbols);
channelCoef = [1,0.2,0.2];
memory = length(channelCoef)-1;
noStates = M^memory;

SNRDB = 8:1:20; %SNR in dB
SNR=10.^(SNRDB/10); %linear SNR 
energy = 1;

TargetErrorCount=1e3; 

%% Variable Initialisation
BER = zeros(1,length(SNRDB));
BERref = zeros(1,length(SNRDB));
BERSxS = zeros(1,length(SNRDB));

%% Generate states
% initialize states
states = zeros(noStates,memory);
for i=1:memory
    temp = 1;
    for j=1:(M^(i-1))
        for k=1:M
            for m=1:(M^(memory-i))
                states(temp,i) = symbols(k);
                temp = temp + 1;
            end
        end
    end
end

%% Check possible transitions
nextState = zeros(1:memory-1);
currState = zeros(1:memory-1);
possibleTransition = zeros(noStates,noStates);

for j = 1:noStates      % future state loop
    for tmp1 = 2:memory
        nextState(tmp1-1) = states(j,tmp1);
    end
    for m = 1:noStates   % present state loop
        for tmp2 = 1:memory-1
            currState(tmp2) = states(m,tmp2);
        end
        %for loop over all possible paths from/to a state
        if (nextState==currState)   % Verifies trellis connection between state m and state j
            possibleTransition(j,m) = 1;
        end
    end
end

%% Rest   
for asdf = 1:length(SNRDB)
    BitErrorCount=0;
    BitErrorCountRef=0;
    BitErrorCountSxS=0;
    it=0;
    
    disp(['SNR=' num2str(SNRDB(asdf)) 'dB']);

    while BitErrorCount<TargetErrorCount
        %% Get random sequence
        bitSequence = randi([0 1], sequenceLength, 1);
        TxSequence = bitToAntipodal(bitSequence, energy);
%         TxSequence = bitToFour(bitSequence, symbols);

        ISISequence = conv(channelCoef, TxSequence);
        RxSequence = addAWGN(ISISequence, SNRDB(asdf));

        %% Viterbi
%         tic
        decodedSyms = viterbi(RxSequence, states, channelCoef, possibleTransition);
%         toc
%         tic
%         test = viterbiPar(RxSequence, states, channelCoef, possibleTransition);
%         toc

%         sum(decodedSyms-test)
        %aligning bits
        recievedBits = antipodalToBit(decodedSyms(memory+1:end-memory));
%         recievedBits = fourToBit(decodedSyms(memory+1:end-memory),symbols);
        alignedBitSeq = recievedBits;

        % Comparison with ISI-free AWGN performance
        reference = addAWGN(TxSequence, SNRDB(asdf));
        referenceRecieved = estimateSignal(reference, energy);
%         referenceRecieved = estimateSignalFour(reference, symbols);
        referenceDecoded = antipodalToBit(referenceRecieved);
%         referenceDecoded = fourToBit(referenceRecieved,symbols);

        %Comparison with SxS
        SxSRecieved = estimateSignal(RxSequence, energy);
        SxSDecoded = antipodalToBit(SxSRecieved((1:end-memory)));
        SxSRecieved = estimateSignalFour(RxSequence, symbols);
        SxSDecoded = fourToBit(SxSRecieved((1:end-memory)),symbols);
        
        BitErrorCount=sum(bitSequence~=alignedBitSeq)+BitErrorCount;
        BitErrorCountRef=sum(bitSequence~=referenceDecoded)+BitErrorCountRef;
        BitErrorCountSxS=sum(bitSequence~=SxSDecoded)+BitErrorCountSxS;
        it=it+1;
    end
        BER(asdf) =  BitErrorCount/(it*length(bitSequence));
        BERref(asdf) = BitErrorCountRef/(it*length(bitSequence));
        BERSxS(asdf) = BitErrorCountSxS/(it*length(bitSequence));
end

profile viewer

%% Plot
figure
semilogy(SNRDB,BER,'-o');
hold on;
semilogy(SNRDB,BERref,'-+');
semilogy(SNRDB,BERSxS,'-x')
PE2=qfunc(sqrt(2*SNR));     %theoretical BER qfunc(sqrt(2Eb/N0)) Eb/N0 is linear SNR
semilogy(SNRDB,PE2,'-');
axis([0 20 10^-6 10^0])
grid on
legend('Viterbi', 'ISI-free','SxS');
xlabel('SNR [dB]')
ylabel('BER')

%% Function
function [bhat] = antipodalToBit(sequence)
    bhat = zeros(length(sequence),1);
    for i = 1:length(sequence)
        if (sequence(i) == 1)
            bhat(i) = 1;            %if signal is 1 bit is 1
        else
            bhat(i) = 0;            %if signal is -1 bit is 0
        end
    end
end

function [bitMap] = fourToBit(sequence, symbols)
    bitMap = zeros(length(sequence)*2,1);
    j=1;
    for i = 1:length(sequence)
        if (sequence(i) == symbols(1))
            bitMap(j) = 0;
            bitMap(j+1) = 0;
        elseif (sequence(i) == symbols(2))
            bitMap(j) = 0;
            bitMap(j+1) = 1;
        elseif (sequence(i) == symbols(3))
            bitMap(j) = 1;
            bitMap(j+1) = 0;
        else
            bitMap(j) = 1;
            bitMap(j+1) = 1;            
        end
        j = j+2;
    end
end
function [fourMap] = bitToFour(sequence,symbols)
    fourMap = zeros(length(sequence)/2,1);
    j = 1;
    for i = 1:2:length(sequence)
        if (sequence(i) == 0)
            if(sequence(i+1) == 0)
                fourMap(j) = symbols(1);
            else
                fourMap(j) = symbols(2);
            end
        else
            if(sequence(i+1) == 0)
                fourMap(j) = symbols(3);
            else
                fourMap(j) = symbols(4);
            end
        end
        j = j+1;
    end        
end

function [antipodalMap] = bitToAntipodal(sequence, energy)
    antipodalMap = zeros(length(sequence),1); 
    for i = 1:length(sequence)
        if sequence(i) == 1
            antipodalMap(i) = energy;   %map bit 1 to 1
        else
            antipodalMap(i) = -energy;  %map bit 0 to -1
        end
    end
end

function [noisySignal] = addAWGN(signal, SNRDB)
    N0=10.^-(SNRDB/10);     %PSD of the noise (linear)
    z = randn(length(signal),1);    %array of normal distributed noise
    noisySignal = signal+sqrt(N0/2)*z;      %adding the noise to the signal
end

function [mhat] = estimateSignalFour(signal, symbols)
    mhat = zeros(length(signal),1);
    temp1 = (symbols(1)+symbols(2))/2;
    temp2 = (symbols(2)+symbols(3))/2;
    temp3 = (symbols(3)+symbols(4))/2;
    for i = 1:length(signal)
        if (signal(i) <= temp1)
            mhat(i) = symbols(1);
        elseif ((signal(i)>temp1) && (signal(i)<=temp2))
            mhat(i) = symbols(2);
        elseif ((signal(i)>temp2) && (signal(i)<=temp3))
            mhat(i) = symbols(3);
        elseif ((signal(i)>temp3))
            mhat(i) = symbols(4);
        end
    end
end

function [mhat] = estimateSignal(signal, energy)
    mhat = zeros(length(signal),1);
    for i = 1:length(signal)
        temp1 = abs(signal(i) - energy);        %distance to 1
        temp2 = abs(signal(i) + energy);        %distance to -1
        if temp1 < temp2
            mhat(i) = energy;                   %if distance to 1 is smaller mhat = 1
        else
            mhat(i) = -energy;                  %if distance to -1 is smaller mhat = -1
        end
    end
end